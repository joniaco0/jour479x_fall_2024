Storywise:
Storywise:
In 2011, the movie Moneyball was released, prompting people like myself to look at baseball a whole different way. The movie was based on the 2002 Oakland Athletics, who won 20 straight games, at the time an AL record on a team that was limited financially. This got me thinking, what teams have optimized talent, and what teams have wasted talent?

Well, to start lets look at two teams that started one way and ended another. The Florida Marlins and the Oakland Athletics. 

In 2003, the Marlins beat the Yankees in the World Series, off the backs of rookie of the year Miguel Cabrera and MVP vote recievers Luis Castillo, Mike Lowell, Ivan Rodr√≠guez and other players. 

But since this World Series, the teams have headed in two opposite directions. In terms of hitting talent, The Marlins have done less with more, and the A's have done more with less.

To calculate this, I set parameters of culumative wins above .500, and culumative WAR over 2 for the average player.
```{r}
library(tidyverse)
library(dplyr)
library(readr)
library(fastDummies)
baseball <- read.csv("https://raw.githubusercontent.com/joniaco0/jour479x_fall_2024/refs/heads/main/data/WARdata.csv")
standings <- read.csv("https://raw.githubusercontent.com/joniaco0/jour479x_fall_2024/refs/heads/main/data/MLB_Data_with_Abbreviations%20-%20MLB_Data_with_Abbreviations.csv")
standings <- standings |> rename(Team = Tm)
baseball$Season <- as.integer(baseball$Season)
merged_data <- baseball |>
  left_join(standings, by = c("Team", "Season"))
merged_data
merged_data$WAR <- as.numeric(merged_data$WAR)
corrections <- merged_data |>
  mutate(Team = case_when(
    Team %in% c("FLA", "MIA") ~ "MIA",
    Team %in% c("ANA", "LAA") ~ "LAA",
    Team %in% c("TBR", "TBD") ~ "TBR",
    Team %in% c("WSN", "MON") ~ "WSN",
    TRUE ~ Team # Keep other teams unchanged
  ))
standings <- standings |>
  mutate(Team = case_when(
    Team %in% c("FLA", "MIA") ~ "MIA",
    Team %in% c("ANA", "LAA") ~ "LAA",
    Team %in% c("TBR", "TBD") ~ "TBR",
    Team %in% c("WSN", "MON") ~ "WSN",
    TRUE ~ Team # Keep other teams unchanged
  ))

maindata <- corrections |> select(Season, Name, PA, Team, WAR, pythW,pythL) |> mutate(WARSHARE = WAR/pythW)
library(dplyr)
library(ggiraph)
library(ggplot2)

# Interactive ggplot object with original lines
gg_combined <- ggplot(long_data, aes(
  x = Season,
  y = CumulativeValue,
  group = Team
)) +
  geom_line_interactive(
    aes(
      color = ifelse(Team == "MIA", "MIA",
              ifelse(Team == "OAK", "OAK", "Other")),  # Highlight specific teams
      alpha = ifelse(Team %in% c("MIA", "OAK"), 1, 0.3),  # Adjust opacity
      tooltip = Team,  # Tooltip only displays the team name
      data_id = Team   # Identifier for interactivity
    ),
    size = ifelse(long_data$Team %in% c("MIA", "OAK"), 1.5, 0.8)  # Thicker lines for MIA and OAK
  ) +
  scale_color_manual(
    values = c(
      "MIA" = "blue",   # Highlight MIA in blue
      "OAK" = "green",  # Highlight OAK in green
      "Other" = "gray"  # All other teams in gray
    )
  ) +
  scale_alpha_identity() +  # Map alpha values directly
  facet_wrap(~ Metric, scales = "free_y", ncol = 1) +  # Separate panels for each metric
  labs(
    title = "Cumulative Wins Above .500 and WAR Over 2 (Interactive)",
    x = "Season",
    y = "Cumulative Value",
    color = "Team"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Rotate and adjust season labels
    axis.title = element_text(size = 12),  # Larger axis titles
    legend.position = "bottom",
    strip.text = element_text(size = 14, face = "bold")  # Emphasize facet titles
  )

# Custom CSS for hover effects
custom_css <- "
  .ggiraph-hover { 
    stroke-width: 3px; 
    opacity: 1; 
  }
  .ggiraph-active line {
    opacity: 0.5; /* Keep non-hovered lines more visible */
  }
  line:hover { 
    opacity: 1; 
    stroke-width: 3px; 
  }
"

# Convert ggplot to interactive ggiraph object
interactive_combined_plot <- girafe(ggobj = gg_combined)

# Add interactivity options
interactive_combined_plot <- girafe_options(
  interactive_combined_plot,
  opts_hover(css = custom_css),
  opts_hover_inv(css = "opacity: 0.2;"),
  opts_tooltip(
    opacity = 0.9,
    css = "background-color: white; padding: 5px; border: 1px solid gray; border-radius: 5px; font-size: 12px;"
  ),
  opts_sizing(rescale = TRUE, width = 0.7)  # Fit graph to RStudio Viewer
)

# Display the interactive plot
interactive_combined_plot




```
Look at how these graphs converge with WAR and Diverge with wins. According to hitting talent, both teams sat around the middle of an average of 2 WAR for around 2 decades, with recent skids causing them to drop off 


```{r}
# Normalize the metrics for comparison
normalized_data <- combined_data |>
  mutate(
    Norm_WinsAbove500 = (CumulativeWinsAbove500 - min(CumulativeWinsAbove500)) / 
                        (max(CumulativeWinsAbove500) - min(CumulativeWinsAbove500)),
    Norm_RelativeWAR = (CumulativeRelativeWAR - min(CumulativeRelativeWAR)) / 
                       (max(CumulativeRelativeWAR) - min(CumulativeRelativeWAR))
  )

# Calculate the difference between the normalized metrics
normalized_data <- normalized_data |>
  mutate(
    Difference = Norm_RelativeWAR - Norm_WinsAbove500
  )

# Aggregate the differences to identify teams with the largest discrepancies
team_discrepancies <- normalized_data |>
  group_by(Team) |>
  summarize(
    Avg_Difference = mean(Difference, na.rm = TRUE),
    Total_Difference = sum(Difference, na.rm = TRUE)
  ) |>
  arrange(desc(Total_Difference))

# Highlight teams with consistently high positive differences
highlighted_teams <- team_discrepancies |>
  filter(Avg_Difference > quantile(Avg_Difference, 0.75))  # Top quartile of "wasted" talent
# Bar chart of total differences
ggplot(team_discrepancies, aes(x = reorder(Team, -Total_Difference), y = Total_Difference, fill = Total_Difference > 0)) +
  geom_bar(stat = "identity") +
  labs(
    title = "Teams with the Largest Discrepancies Between WAR and Wins",
    x = "Team",
    y = "Total Difference",
    fill = "Wasted Talent"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```
```{r}
# Line chart showing differences over seasons
library(ggiraph)
# Interactive line chart with custom highlights
interactive_chart <- ggplot(normalized_data, aes(x = Season, y = Difference, group = Team)) +
  geom_line_interactive(
    aes(
      color = ifelse(Team == "MIA", "MIA",
              ifelse(Team == "OAK", "OAK", "Other")),  # Highlight MIA and OAK
      tooltip = Team,  # Tooltip shows only the team name
      data_id = Team   # Identifier for interactivity
    ),
    alpha = ifelse(normalized_data$Team %in% c("MIA", "OAK"), 1, 0.5),  # Highlight opacity for MIA and OAK
    size = ifelse(normalized_data$Team %in% c("MIA", "OAK"), 1.5, 1)  # Thicker lines for highlighted teams
  ) +
  scale_color_manual(
    values = c(
      "MIA" = "blue",    # MIA highlighted in blue
      "OAK" = "green",   # OAK highlighted in green
      "Other" = "gray"   # Other teams in gray
    )
  ) +
  labs(
    title = "Discrepancy Between WAR and Wins Above .500 Over Seasons",
    x = "Season",
    y = "Difference (Normalized WAR - Wins Above .500)",
    color = "Team Highlight"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.title = element_text(size = 12),
    plot.title = element_text(size = 16, face = "bold")
  )

# Convert ggplot to interactive plot
girafe_plot <- girafe(ggobj = interactive_chart)

# Add tooltip and hover options
girafe_plot <- girafe_options(
  girafe_plot,
  opts_hover(css = "stroke-width: 2px; opacity: 1;"),
  opts_hover_inv(css = "opacity: 0.3;"),
  opts_tooltip(
    opacity = 0.9,
    css = "background-color: white; padding: 5px; border: 1px solid gray; border-radius: 5px; font-size: 12px;"
  ),
  opts_sizing(rescale = TRUE)
)

# Display the interactive chart
girafe_plot
```


In 2017, Giancarlo Stanton hit 59 home runs in one season. The seventh most an NL player has hit in league history. This campaign led to becoming the first MVP in Florida/Miami Marlins history. This team also sported talents from future MVP Christian Yelich, and All-Stars Marcell Ozuna, J.T Realmuto, Dee Gordon and the dwindling career of Ichiro Suzuki on the bench. The problem was, they sported one of the worst pitching staffs in the league, sporting an average ERA of almost five runs per nine innings.

This season doesn't stick out like a sore thumb for no reason. Looking at teams that "waste" offensive talent, the data shows that this Miami Marlins team wasted the most amount offensive talent of any team in the last 24 years when looking at Cumulative WAR and Expected (Pythagorean) Wins. 



```{r}
# Group by Team and Season: Calculate residuals for each team-season combination
team_season_residuals <- team_stats |>
  filter(!is.na(weighted_WAR) & !is.na(pythW)) |>  # Remove missing values
  group_by(Season) |>
  group_split() |>  # Split data by Season to fit models separately
  purrr::map_dfr(~ {
    # Fit the model for each season
    fit_model <- lm(pythW ~ weighted_WAR, data = .x)
    .x |>
      mutate(
        predicted_pythW = predict(fit_model, newdata = .x),  # Predicted PythW
        residual = pythW - predicted_pythW                  # Residuals
      )
  }) |>
  group_by(Team, Season) |>
  summarize(
    total_residual = sum(residual, na.rm = TRUE),
    avg_residual = mean(residual, na.rm = TRUE),
    .groups = "drop"
  )

library(ggplot2)
library(ggiraph)
# Create the ggplot object with specific highlighting for 2017 Marlins
gg <- ggplot(team_season_residuals, aes(x = Season, y = avg_residual, fill = Team)) +
  geom_bar_interactive(
    stat = "identity",
    position = "dodge",
    aes(
      tooltip = paste0(
        "Team: ", Team, "<br>",
        "Season: ", Season, "<br>",
        "Average Residual: ", round(avg_residual, 2)
      ),
      data_id = paste(Team, Season),
      fill = ifelse(Team == "MIA" & Season == 2017, "red", "green")
    ),
    alpha = 0.9
  ) +
  scale_fill_identity(
    guide = guide_legend(
      override.aes = list(alpha = 1) 
    )
  ) +
  labs(
    title = "The 2017 Miami Marlins wasted an immense amount of talent",
    x = "Season",
    y = "Average Residuals",
    fill = "Team"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 10), 
    axis.title.x = element_text(margin = margin(t = 10)),
    plot.margin = margin(t = 10, r = 10, b = 20, l = 10),
    legend.position = "bottom",
    plot.title = element_text(size = 14, face = "bold"),
    axis.title = element_text(size = 12)
  )
interactive_chart <- girafe(ggobj = gg)
interactive_chart <- girafe_options(
  interactive_chart,
  opts_hover(css = "stroke-width: 2px; fill-opacity: 1;"),
  opts_hover_inv(css = "opacity: 0.2;"),
  opts_tooltip(css = "background-color: white; color: black; border: 1px solid black; padding: 5px;")
)

# Display the interactive chart
interactive_chart

```







```{r}
maindata$PA <- as.numeric(maindata$PA) 
team_stats <- maindata |>
  group_by(Season, Team) |>
  summarize(
    total_WAR = sum(WAR),
    weighted_WAR = weighted.mean(WAR, w = PA, na.rm = TRUE),       # Weighted WAR
    weighted_WARSHARE = weighted.mean(WARSHARE, w = PA, na.rm = TRUE),  # Weighted WARSHARE
    high_contributors = sum(WARSHARE > 0.07),
    pythW = mean(pythW, na.rm = TRUE)  # Average Pythagorean Wins
  )

```
Moving on to each season, how do you classify and cluster these seasons to find outliers? By weighting WARSHARE(WAR/PythW), weighted WAR (WAR with plate apperances weighted more heavily), the total WAR of the team, the pythW and the high contrbutors (players with over 7%) WARSHARE, grouping these teams to find the ones that
```{r}
# Step 1: One-hot encode the Team column (retain the original Team column)
team_stats_encoded <- team_stats |> dummy_cols(select_columns = "Team", remove_first_dummy = TRUE, remove_selected_columns = FALSE)

# Step 2: Ensure numeric columns are numeric, but keep Team and Season as character
team_stats_encoded <- team_stats_encoded |>
  mutate(across(-c(Team, Season), as.numeric))  # Convert all columns except Team and Season to numeric

# Step 3: Handle NA, NaN, and Inf values
team_stats_encoded <- team_stats_encoded |>
  mutate(across(-c(Team, Season), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .))) |> # Replace NA with column mean
  mutate(across(-c(Team, Season), ~ ifelse(is.infinite(.), max(.[!is.infinite(.)], na.rm = TRUE), .))) # Replace Inf with max

# Step 4: Scale the data (excluding Team and Season)
scaled_data <- team_stats_encoded |>
  select(total_WAR, weighted_WAR, weighted_WARSHARE, pythW, starts_with("Team_")) |>
  scale()

# Step 5: Perform K-means clustering
set.seed(42)  # Ensure reproducibility
clusters <- kmeans(scaled_data, centers = 8)

# Step 6: Add cluster labels back to the dataset
team_stats_clustered <- team_stats_encoded |>
  mutate(cluster = clusters$cluster)

# Step 7: Add interactive features (tooltips and CSS IDs)
team_stats_clustered <- team_stats_clustered |>
  mutate(
    tooltip = paste0(
      "Team: ", Team, "<br>",
      "Season: ", Season, "<br>",
      "Cluster: ", cluster, "<br>",
      "Pythagorean Wins: ", round(pythW, 2), "<br>",
      "Weighted WARSHARE: ", round(weighted_WARSHARE, 2), "<br>",
      "Weighted WAR: ", round(weighted_WAR, 2)
    ),
    css_id = paste0("cluster-", Team, "-", Season)
  )

cluster_summary <- team_stats_clustered |>
  group_by(cluster) |>
  summarize(
    avg_pythW = mean(pythW),
    avg_WARSHARE = mean(weighted_WARSHARE),
    avg_WAR = mean(total_WAR),
    total_teams = n()
  )
cluster_summary


```

```{r}
# Create an interactive plot with updated tooltip, best-fit line, and cluster highlighting
gg_cluster <- ggplot(team_stats_clustered, aes(x = pythW, y = weighted_WAR, color = factor(cluster))) +
  geom_point_interactive(
    aes(
      tooltip = paste0(
        "Team: ", Team, "<br>",
        "Season: ", Season, "<br>",
        "Cluster: ", cluster, "<br>",
        "Weighted WAR: ", round(weighted_WAR, 2), "<br>",
        "PythW: ", round(pythW, 2)
      ),
      data_id = cluster  # Ensure the entire cluster is highlighted
    ),
    size = 3
  ) +
  geom_smooth(method = "lm", color = "black", linetype = "dashed", se = FALSE) +  # Line of best fit
  labs(
    title = "Interactive Team Clustering: Weighted WAR vs. Pythagorean Wins",
    x = "Pythagorean Wins",
    y = "Weighted WAR",
    color = "Cluster"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",       # Move legend to bottom
    plot.title = element_text(size = 14, face = "bold"),  # Title formatting
    plot.margin = margin(10, 10, 10, 10)  # Adjust margins to fit the screen
  )

# Make the interactive plot fit the screen and support cluster highlighting
interactive_cluster_plot <- girafe(ggobj = gg_cluster, width_svg = 10, height_svg = 6)
interactive_cluster_plot <- girafe_options(
  interactive_cluster_plot,
  opts_hover(css = "stroke-width: 3px; fill-opacity: 1;"), # Highlight hovered cluster
  opts_hover_inv(css = "opacity: 0.3;"), # De-emphasize non-hovered clusters
  opts_tooltip(css = "background-color: white; color: black; border: 1px solid black; padding: 5px;"),
  opts_sizing(rescale = TRUE)  # Ensure responsiveness
)

# Display the interactive cluster plot
interactive_cluster_plot

```
```{r}
# Add a highlight column for STL team
team_stats_clustered <- team_stats_clustered |>
  mutate(highlight_STL = ifelse(Team == "STL", "Highlighted: STL", "Other Teams"))

# Create an interactive plot highlighting STL
gg_stl <- ggplot(team_stats_clustered, aes(x = pythW, y = weighted_WAR, color = highlight_STL)) +
  geom_point_interactive(
    aes(
      tooltip = paste0(
        "Team: ", Team, "<br>",
        "Season: ", Season, "<br>",
        "Cluster: ", cluster, "<br>",
        "Weighted WAR: ", round(weighted_WAR, 2), "<br>",
        "PythW: ", round(pythW, 2)
      ),
      data_id = css_id
    ),
    size = 3
  ) +
  geom_smooth(method = "lm", color = "black", linetype = "dashed", se = FALSE) +  # Line of best fit
  scale_color_manual(
    values = c("Highlighted: STL" = "red", "Other Teams" = "grey")
  ) +
  labs(
    title = "Interactive Plot Highlighting STL Team",
    x = "Pythagorean Wins",
    y = "Weighted WAR",
    color = "Legend"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",       # Move legend to bottom
    plot.title = element_text(size = 14, face = "bold"),  # Title formatting
    plot.margin = margin(10, 10, 10, 10)  # Adjust margins to fit the screen
  )

# Make the interactive plot fit the screen
interactive_stl_plot <- girafe(ggobj = gg_stl, width_svg = 10, height_svg = 6)
interactive_stl_plot <- girafe_options(
  interactive_stl_plot,
  opts_hover(css = "stroke-width: 3px; fill-opacity: 1;"), # Highlight hovered points
  opts_hover_inv(css = "opacity: 0.3;"), # De-emphasize non-hovered points
  opts_tooltip(css = "background-color: white; color: black; border: 1px solid black; padding: 5px;"),
  opts_sizing(rescale = TRUE)  # Ensure responsiveness
)

# Display the interactive STL plot
interactive_stl_plot

```

```{r}
library(dplyr)
library(ggiraph)
library(ggplot2)

# Compute smoothed values separately for interactive use
smoothed_data <- long_data %>%
  group_by(Team, Metric) %>%
  arrange(Season) %>%
  mutate(SmoothedValue = loess(CumulativeValue ~ as.numeric(Season), data = cur_data(), span = 0.3)$fitted) %>%
  ungroup()

# Interactive ggplot object with precomputed smooth lines
gg_combined <- ggplot(smoothed_data, aes(
  x = Season,
  y = SmoothedValue,
  group = Team
)) +
  geom_line_interactive(
    aes(
      color = ifelse(Team == "MIA", "MIA",
              ifelse(Team == "OAK", "OAK", "Other")),  # Highlight specific teams
      alpha = ifelse(Team %in% c("MIA", "OAK"), 1, 0.3),  # Adjust opacity
      tooltip = Team,  # Tooltip only displays the team name
      data_id = Team   # Identifier for interactivity
    ),
    size = ifelse(smoothed_data$Team %in% c("MIA", "OAK"), 1.5, 0.8)  # Thicker lines for MIA and OAK
  ) +
  scale_color_manual(
    values = c(
      "MIA" = "blue",   # Highlight MIA in blue
      "OAK" = "green",  # Highlight OAK in green
      "Other" = "gray"  # All other teams in gray
    )
  ) +
  scale_alpha_identity() +  # Map alpha values directly
  facet_wrap(~ Metric, scales = "free_y", ncol = 1) +  # Separate panels for each metric
  labs(
    title = "Cumulative Wins Above .500 and WAR Over 2 (Interactive)",
    x = "Season",
    y = "Smoothed Cumulative Value",
    color = "Team"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Rotate and adjust season labels
    axis.title = element_text(size = 12),  # Larger axis titles
    legend.position = "bottom",
    strip.text = element_text(size = 14, face = "bold")  # Emphasize facet titles
  )

# Custom CSS for hover effects
custom_css <- "
  .ggiraph-hover { 
    stroke-width: 3px; 
    opacity: 1; 
  }
  .ggiraph-active line {
    opacity: 0.5; /* Keep non-hovered lines more visible */
  }
  line:hover { 
    opacity: 1; 
    stroke-width: 3px; 
  }
"

# Convert ggplot to interactive ggiraph object
interactive_combined_plot <- girafe(ggobj = gg_combined)

# Add interactivity options
interactive_combined_plot <- girafe_options(
  interactive_combined_plot,
  opts_hover(css = custom_css),
  opts_hover_inv(css = "opacity: 0.2;"),
  opts_tooltip(
    opacity = 0.9,
    css = "background-color: white; padding: 5px; border: 1px solid gray; border-radius: 5px; font-size: 12px;"
  ),
  opts_sizing(rescale = TRUE, width = 0.7)  # Fit graph to RStudio Viewer
)

# Display the interactive plot
interactive_combined_plot

   


```

```{r}

```





